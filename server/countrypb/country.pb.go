// Code generated by protoc-gen-go. DO NOT EDIT.
// source: country.proto

package country

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Country struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Flag                 string   `protobuf:"bytes,3,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Country) Reset()         { *m = Country{} }
func (m *Country) String() string { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()    {}
func (*Country) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a73f5bdb29770c, []int{0}
}

func (m *Country) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Country.Unmarshal(m, b)
}
func (m *Country) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Country.Marshal(b, m, deterministic)
}
func (m *Country) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Country.Merge(m, src)
}
func (m *Country) XXX_Size() int {
	return xxx_messageInfo_Country.Size(m)
}
func (m *Country) XXX_DiscardUnknown() {
	xxx_messageInfo_Country.DiscardUnknown(m)
}

var xxx_messageInfo_Country proto.InternalMessageInfo

func (m *Country) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Country) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Country) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

type GetCountriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCountriesRequest) Reset()         { *m = GetCountriesRequest{} }
func (m *GetCountriesRequest) String() string { return proto.CompactTextString(m) }
func (*GetCountriesRequest) ProtoMessage()    {}
func (*GetCountriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a73f5bdb29770c, []int{1}
}

func (m *GetCountriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCountriesRequest.Unmarshal(m, b)
}
func (m *GetCountriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCountriesRequest.Marshal(b, m, deterministic)
}
func (m *GetCountriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountriesRequest.Merge(m, src)
}
func (m *GetCountriesRequest) XXX_Size() int {
	return xxx_messageInfo_GetCountriesRequest.Size(m)
}
func (m *GetCountriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountriesRequest proto.InternalMessageInfo

type GetCountriesResponse struct {
	Countries            []*Country `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetCountriesResponse) Reset()         { *m = GetCountriesResponse{} }
func (m *GetCountriesResponse) String() string { return proto.CompactTextString(m) }
func (*GetCountriesResponse) ProtoMessage()    {}
func (*GetCountriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a73f5bdb29770c, []int{2}
}

func (m *GetCountriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCountriesResponse.Unmarshal(m, b)
}
func (m *GetCountriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCountriesResponse.Marshal(b, m, deterministic)
}
func (m *GetCountriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountriesResponse.Merge(m, src)
}
func (m *GetCountriesResponse) XXX_Size() int {
	return xxx_messageInfo_GetCountriesResponse.Size(m)
}
func (m *GetCountriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountriesResponse proto.InternalMessageInfo

func (m *GetCountriesResponse) GetCountries() []*Country {
	if m != nil {
		return m.Countries
	}
	return nil
}

type AddCountryRequest struct {
	Country              *Country `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCountryRequest) Reset()         { *m = AddCountryRequest{} }
func (m *AddCountryRequest) String() string { return proto.CompactTextString(m) }
func (*AddCountryRequest) ProtoMessage()    {}
func (*AddCountryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a73f5bdb29770c, []int{3}
}

func (m *AddCountryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCountryRequest.Unmarshal(m, b)
}
func (m *AddCountryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCountryRequest.Marshal(b, m, deterministic)
}
func (m *AddCountryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCountryRequest.Merge(m, src)
}
func (m *AddCountryRequest) XXX_Size() int {
	return xxx_messageInfo_AddCountryRequest.Size(m)
}
func (m *AddCountryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCountryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCountryRequest proto.InternalMessageInfo

func (m *AddCountryRequest) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

type AddCountryResponse struct {
	Success              string   `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCountryResponse) Reset()         { *m = AddCountryResponse{} }
func (m *AddCountryResponse) String() string { return proto.CompactTextString(m) }
func (*AddCountryResponse) ProtoMessage()    {}
func (*AddCountryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a73f5bdb29770c, []int{4}
}

func (m *AddCountryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCountryResponse.Unmarshal(m, b)
}
func (m *AddCountryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCountryResponse.Marshal(b, m, deterministic)
}
func (m *AddCountryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCountryResponse.Merge(m, src)
}
func (m *AddCountryResponse) XXX_Size() int {
	return xxx_messageInfo_AddCountryResponse.Size(m)
}
func (m *AddCountryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCountryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCountryResponse proto.InternalMessageInfo

func (m *AddCountryResponse) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func init() {
	proto.RegisterType((*Country)(nil), "country.Country")
	proto.RegisterType((*GetCountriesRequest)(nil), "country.GetCountriesRequest")
	proto.RegisterType((*GetCountriesResponse)(nil), "country.GetCountriesResponse")
	proto.RegisterType((*AddCountryRequest)(nil), "country.AddCountryRequest")
	proto.RegisterType((*AddCountryResponse)(nil), "country.AddCountryResponse")
}

func init() { proto.RegisterFile("country.proto", fileDescriptor_43a73f5bdb29770c) }

var fileDescriptor_43a73f5bdb29770c = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0x4d, 0x2b, 0x96, 0x8e, 0xba, 0xe8, 0xa8, 0x10, 0xaa, 0x42, 0xc9, 0xa9, 0x78, 0xe8,
	0x61, 0x7d, 0x00, 0x59, 0x04, 0xf7, 0xe4, 0x25, 0x3e, 0xc1, 0x9a, 0x8e, 0x52, 0xd0, 0x66, 0x6d,
	0x52, 0xc1, 0x37, 0xf2, 0x31, 0x65, 0xf3, 0xa7, 0xbb, 0x62, 0xbd, 0x4d, 0xbe, 0xf9, 0xf8, 0xcd,
	0xf7, 0x11, 0x38, 0x56, 0x7a, 0xe8, 0x6c, 0xff, 0x55, 0xaf, 0x7b, 0x6d, 0x35, 0x66, 0xe1, 0x29,
	0x16, 0x90, 0xdd, 0xfb, 0x11, 0x67, 0x90, 0xb4, 0x0d, 0x67, 0x25, 0xab, 0x52, 0x99, 0xb4, 0x0d,
	0x22, 0xec, 0x77, 0xab, 0x77, 0xe2, 0x49, 0xc9, 0xaa, 0x5c, 0xba, 0x79, 0xa3, 0xbd, 0xbc, 0xad,
	0x5e, 0x79, 0xea, 0xb5, 0xcd, 0x2c, 0x2e, 0xe0, 0x6c, 0x49, 0xd6, 0x53, 0x5a, 0x32, 0x92, 0x3e,
	0x06, 0x32, 0x56, 0x3c, 0xc0, 0xf9, 0x6f, 0xd9, 0xac, 0x75, 0x67, 0x08, 0x6b, 0xc8, 0x55, 0x14,
	0x39, 0x2b, 0xd3, 0xea, 0x70, 0x7e, 0x52, 0xc7, 0x74, 0x21, 0x8b, 0xdc, 0x5a, 0xc4, 0x1d, 0x9c,
	0x2e, 0x9a, 0x26, 0x2e, 0x3c, 0x1c, 0x6f, 0x20, 0x36, 0x70, 0x81, 0xa7, 0x10, 0x63, 0xc5, 0x1a,
	0x70, 0x17, 0x10, 0x62, 0x70, 0xc8, 0xcc, 0xa0, 0x14, 0x19, 0xe3, 0x08, 0xb9, 0x8c, 0xcf, 0xf9,
	0x37, 0x83, 0x59, 0x70, 0x3f, 0x51, 0xff, 0xd9, 0x2a, 0xc2, 0x47, 0x38, 0xda, 0xed, 0x82, 0x57,
	0xe3, 0xb5, 0x89, 0xe6, 0xc5, 0xf5, 0x3f, 0x5b, 0x7f, 0x59, 0xec, 0xe1, 0x12, 0x60, 0x9b, 0x08,
	0x8b, 0xd1, 0xfe, 0xa7, 0x67, 0x71, 0x39, 0xb9, 0x8b, 0xa0, 0xe7, 0x03, 0xf7, 0x9b, 0xb7, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x54, 0xba, 0xb0, 0xde, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CountryServiceClient is the client API for CountryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountryServiceClient interface {
	GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error)
	AddCountry(ctx context.Context, in *AddCountryRequest, opts ...grpc.CallOption) (*AddCountryResponse, error)
}

type countryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCountryServiceClient(cc grpc.ClientConnInterface) CountryServiceClient {
	return &countryServiceClient{cc}
}

func (c *countryServiceClient) GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error) {
	out := new(GetCountriesResponse)
	err := c.cc.Invoke(ctx, "/country.CountryService/GetCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryServiceClient) AddCountry(ctx context.Context, in *AddCountryRequest, opts ...grpc.CallOption) (*AddCountryResponse, error) {
	out := new(AddCountryResponse)
	err := c.cc.Invoke(ctx, "/country.CountryService/AddCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountryServiceServer is the server API for CountryService service.
type CountryServiceServer interface {
	GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error)
	AddCountry(context.Context, *AddCountryRequest) (*AddCountryResponse, error)
}

// UnimplementedCountryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCountryServiceServer struct {
}

func (*UnimplementedCountryServiceServer) GetCountries(ctx context.Context, req *GetCountriesRequest) (*GetCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (*UnimplementedCountryServiceServer) AddCountry(ctx context.Context, req *AddCountryRequest) (*AddCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCountry not implemented")
}

func RegisterCountryServiceServer(s *grpc.Server, srv CountryServiceServer) {
	s.RegisterService(&_CountryService_serviceDesc, srv)
}

func _CountryService_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServiceServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/country.CountryService/GetCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServiceServer).GetCountries(ctx, req.(*GetCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountryService_AddCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServiceServer).AddCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/country.CountryService/AddCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServiceServer).AddCountry(ctx, req.(*AddCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CountryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "country.CountryService",
	HandlerType: (*CountryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCountries",
			Handler:    _CountryService_GetCountries_Handler,
		},
		{
			MethodName: "AddCountry",
			Handler:    _CountryService_AddCountry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "country.proto",
}
